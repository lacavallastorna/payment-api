using AutoMapper;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using PaymentApi.DataAccess.Data;
using PaymentApi.DataAccess.Initialization;
using PaymentApi.DataAccess.Interfaces;
using PaymentApi.DataAccess.Repository.Instances;
using PaymentApi.DataAccess.Repository.Interfaces;
using PaymentApi.Models.Mapper;
using Serilog;
using System;
using System.IO;
using System.Reflection;

namespace PaymentApi.Api
{
	public class Startup
	{
		public IConfiguration Configuration { get; }
		public IWebHostEnvironment CurrentEnvironment { get; }

		public Startup(IConfiguration configuration, IWebHostEnvironment currentEnvironment)
		{
			Configuration = configuration;
			CurrentEnvironment = currentEnvironment;
		}

		// This method gets called by the runtime. Use this method to add services to the container.
		public void ConfigureServices(IServiceCollection services)
		{
			Console.WriteLine($"Current Environment is {CurrentEnvironment.EnvironmentName}");
			string encSQLConnection = "PaymentApi_DEV_Connection";

			if (CurrentEnvironment.IsEnvironment("Testing"))
			{
				services.AddDbContext<ApplicationDbContext>(options => options.UseInMemoryDatabase("TestingDB"));
			}
			else
			{
				if (CurrentEnvironment.IsProduction())
				{
					encSQLConnection = "PaymentApi_PROD_Connection";
				}
				if (CurrentEnvironment.IsStaging())
				{
					encSQLConnection = "PaymentApi_STAGING_Connection";
				}
				services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString(encSQLConnection)));
				services.AddScoped<IDbInitializer, DbInitializer>();
			}

			services.AddControllers();
			services.AddScoped<IAccountRepositoryAsync, AccountRepositoryAsync>();
			services.AddScoped<ITransactionRepositoryAsync, TransactionRepositoryAsync>();
			services.AddAutoMapper(typeof(PaymentApiMapper));
			services.AddMvcCore().AddDataAnnotations();

			var contact = new OpenApiContact()
			{
				Name = "Walter Tudorin",
				Email = "wtudorin@gmail.com",
				Url = new Uri("http://www.tudorin.net")
			};

			var license = new OpenApiLicense()
			{
				Name = "Open License",
				Url = new Uri("http://www.tudorin.net")
			};

			var info = new OpenApiInfo()
			{
				Version = "v1",
				Title = "Swagger Demo Payment API",
				Description = "Swagger Demo Payment API",
				TermsOfService = new Uri("http://www.tudorin.net"),
				Contact = contact,
				License = license
			};

			services.AddSwaggerGen(c =>
			{
				c.SwaggerDoc("v1", info);

				//Locate the XML file being generated by ASP.NET...
				var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
				var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

				//... and tell Swagger to use those XML comments.
				c.IncludeXmlComments(xmlPath);
			});
		}

		// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
		public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ApplicationDbContext db)
		{
			app.UseSerilogRequestLogging();
			app.UseRouting();
			app.UseSwagger();
			app.UseSwaggerUI(c =>
			{
				c.SwaggerEndpoint("/swagger/v1/swagger.json", "Swagger Demo Payment API v1");
				c.RoutePrefix = string.Empty;
			});

			app.UseEndpoints(endpoints =>
			{
				endpoints.MapControllers();
			});

			if (!env.IsEnvironment("Testing"))
			{
				var scopeFactory = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>();
				using (var scope = scopeFactory.CreateScope())
				{
					var dbInitializer = scope.ServiceProvider.GetService<IDbInitializer>();
					dbInitializer.Initialize();
					dbInitializer.SeedData();
				}
			}
		}
	}
}